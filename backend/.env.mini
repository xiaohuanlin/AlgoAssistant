# AlgoAssistant Mini Deployment Configuration - 1GB Memory Optimized
# Based on .env.example with lightweight production settings

# ================================
# DATABASE CONFIGURATION
# ================================

# SQLite database for lightweight deployment with WAL mode for better concurrency
DATABASE_URL=sqlite:///./data/algo_assistant.db

# Database connection settings
DATABASE_ECHO=false

# SQLite optimization settings (not in .env.example but needed for mini deployment)
SQLITE_TIMEOUT=30000
SQLITE_POOL_SIZE=5
SQLITE_MAX_OVERFLOW=10

# ================================
# SECURITY CONFIGURATION
# ================================

# JWT Secret Key - CHANGE THIS IN PRODUCTION!
# Generate with: python -c "import secrets; print(secrets.token_urlsafe(32))"
SECRET_KEY=your-super-secret-key-change-this-in-production

# Fernet encryption key - CHANGE THIS IN PRODUCTION!
# Generate with: python -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())"
FERNET_KEY=your-32-byte-base64-encoded-fernet-key

# JWT algorithm and token expiration
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=60

# Password hashing algorithm (default: bcrypt)
PASSWORD_HASH_ALGORITHM=bcrypt

# ================================
# APPLICATION SETTINGS
# ================================

# Environment (development, production, testing)
ENVIRONMENT=production

# Logging level (DEBUG, INFO, WARNING, ERROR, CRITICAL) - WARNING for production to reduce I/O
LOG_LEVEL=WARNING

# Application host and port
HOST=0.0.0.0
PORT=8000

# CORS settings
CORS_ORIGINS=["http://localhost", "http://localhost:80"]

# ================================
# REDIS CONFIGURATION (for Celery)
# ================================

# Redis URL for caching and Celery message broker
REDIS_URL=redis://redis:6379/0

# Celery configuration (settings.py defines these but we use simplified Redis URL)
CELERY_BROKER_URL=redis://redis:6379/1
CELERY_RESULT_BACKEND=redis://redis:6379/2

# ================================
# EXTERNAL SERVICE INTEGRATIONS
# ================================

# Google OAuth Integration (REQUIRED for authentication)
GOOGLE_CLIENT_ID=your-google-client-id.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=your-google-client-secret
GOOGLE_REDIRECT_URI=http://localhost/api/google/callback

# ================================
# FILE UPLOAD CONFIGURATION
# ================================

# Upload directory
UPLOAD_DIR=/app/data/uploads

# Maximum file size - 5MB for memory optimization
MAX_FILE_SIZE=5242880

# Allowed file extensions
ALLOWED_EXTENSIONS=["jpg", "jpeg", "png", "gif", "pdf", "txt", "md"]

# ================================
# RATE LIMITING
# ================================

# Rate limiting for resource protection
RATE_LIMIT_ENABLED=true
RATE_LIMIT_REQUESTS_PER_MINUTE=60
RATE_LIMIT_BURST=10

# ================================
# DEVELOPMENT SETTINGS
# ================================

# Disable debug features for production
DEBUG=false
RELOAD=false
ENABLE_PROFILING=false

# ================================
# BACKGROUND TASK PROCESSING
# ================================

# Celery worker settings - optimized for 1GB memory
CELERY_WORKER_CONCURRENCY=1

# ================================
# MEMORY OPTIMIZATION SETTINGS
# ================================
# Additional settings for 1GB memory constraint (not in .env.example)

# Python optimization flags (used by Docker runtime)
PYTHONOPTIMIZE=1
PYTHONDONTWRITEBYTECODE=1
PYTHONHASHSEED=random
PYTHONUNBUFFERED=1

# Server process limits for 1GB memory
UVICORN_WORKERS=1
WEB_CONCURRENCY=1
