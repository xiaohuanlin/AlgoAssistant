# Ultra-lightweight production image - optimized for 1GB memory
FROM python:3.11-alpine as builder

# Install build dependencies
RUN apk add --no-cache \
    build-base \
    libffi-dev \
    openssl-dev \
    && rm -rf /var/cache/apk/*

# Install uv
COPY --from=ghcr.io/astral-sh/uv:latest /uv /bin/uv

# Set working directory
WORKDIR /app

# Create virtual environment
RUN uv venv .venv
ENV PATH="/app/.venv/bin:$PATH"

# Copy dependency files
COPY pyproject.toml uv.lock ./

# Install production dependencies only, exclude dev tools
RUN uv sync --frozen --no-cache --no-dev --no-install-project

# Runtime stage - use alpine base image
FROM python:3.11-alpine

# Install runtime dependencies (minimal installation)
RUN apk add --no-cache \
    curl \
    sqlite \
    && rm -rf /var/cache/apk/*

# Create non-root user
RUN addgroup -g 1001 -S appuser && \
    adduser -S appuser -u 1001 -G appuser

# Set working directory
WORKDIR /app

# Copy virtual environment from builder stage
COPY --from=builder /app/.venv /app/.venv
ENV PATH="/app/.venv/bin:$PATH"

# Copy application code
COPY --chown=appuser:appuser . .

# Create data, logs, and uploads directories with proper permissions
RUN mkdir -p data logs uploads && \
    touch data/algo_assistant.db && \
    chown -R appuser:appuser /app && \
    chmod 755 data uploads && \
    chmod 644 data/algo_assistant.db

# Switch to non-root user
USER appuser

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Expose port
EXPOSE 8000

# Startup script - only run web server, celery disabled for mini version
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
