# Multi-stage build - Ultra-lightweight frontend
FROM node:18-alpine as builder

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install all dependencies first (needed for build)
# Set Node.js memory limits for ultra-low memory build
ENV NODE_OPTIONS="--max-old-space-size=768"
ENV NPM_CONFIG_PROGRESS=false
ENV NPM_CONFIG_LOGLEVEL=error
# Install dependencies
RUN npm install --legacy-peer-deps --no-audit --no-fund --prefer-offline

# Copy source code
COPY . .

# Build production version with ultra-low memory optimizations
ENV NODE_ENV=production
ENV GENERATE_SOURCEMAP=false
ENV INLINE_RUNTIME_CHUNK=false
ENV CI=true
ENV BUILD_PATH=build
ENV DISABLE_ESLINT_PLUGIN=true
RUN npm run build

# Production stage - use nginx alpine
FROM nginx:alpine

# Remove default nginx configuration
RUN rm -rf /usr/share/nginx/html/*

# Copy build artifacts
COPY --from=builder /app/build /usr/share/nginx/html

# Copy nginx configuration
COPY nginx.mini.conf /etc/nginx/conf.d/default.conf

# Create non-root user
RUN addgroup -g 1001 -S appuser && \
    adduser -S appuser -u 1001 -G appuser

# Set permissions
RUN chown -R appuser:appuser /usr/share/nginx/html && \
    chown -R appuser:appuser /var/cache/nginx && \
    chown -R appuser:appuser /var/log/nginx && \
    chown -R appuser:appuser /etc/nginx/conf.d && \
    touch /var/run/nginx.pid && \
    chown -R appuser:appuser /var/run/nginx.pid

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 80

# Start nginx
CMD ["nginx", "-g", "daemon off;"]
