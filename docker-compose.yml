services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: algo_assistant_db
    environment:
      POSTGRES_DB: algo_assistant
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - algo_network

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: algo_assistant_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - algo_network

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: algo_assistant_backend
    env_file:
      - ./backend/.env
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/app:/app/app
      - ./backend/requirements.txt:/app/requirements.txt
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - algo_network

  # React Frontend (Development) - Optional
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: algo_assistant_frontend
    env_file:
      - ./frontend/.env
    ports:
      - "3000:3000"
    depends_on:
      - backend
    environment:
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - ./frontend/package.json:/app/package.json
      - ./frontend/package-lock.json:/app/package-lock.json
    networks:
      - algo_network

volumes:
  postgres_data:
  redis_data:


networks:
  algo_network:
    driver: bridge
