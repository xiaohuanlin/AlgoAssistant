version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: algo_assistant_db
    environment:
      POSTGRES_DB: algo_assistant
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres  # pragma: allowlist secret
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - algo_network

  # Redis queue service
  redis:
    image: redis:7-alpine
    container_name: algo_assistant_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - algo_network

  # Backend API service
  backend:
    build:
      context: ./backend
      target: production
    container_name: algo_assistant_backend
    env_file:
      - ./backend/.env
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - algo_network

  # Frontend service
  frontend:
    build:
      context: ./frontend
    container_name: algo_assistant_frontend
    env_file:
      - ./frontend/.env
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - ./frontend/package.json:/app/package.json
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - FAST_REFRESH=true
    depends_on:
      - backend
    networks:
      - algo_network

  celery_worker:
    build:
      context: ./backend
      target: production
    container_name: algo_assistant_celery_worker
    command: celery -A app.celery_app.celery_app worker --loglevel=INFO --concurrency=2 -Q leetcode_sync_queue,git_sync_queue,gemini_sync_queue,notion_sync_queue,notification_queue
    env_file:
      - ./backend/.env
    depends_on:
      backend:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - algo_network

  # Celery Beat - scheduled tasks (notifications, etc.)
  celery_beat:
    build:
      context: ./backend
      target: production
    container_name: algo_assistant_celery_beat
    command: celery -A app.celery_app.celery_app beat --loglevel=INFO --pidfile=/tmp/celerybeat.pid
    env_file:
      - ./backend/.env
    depends_on:
      backend:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - algo_network

volumes:
  postgres_data:
  redis_data:

networks:
  algo_network:
    driver: bridge
