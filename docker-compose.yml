version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: algo_assistant_db
    environment:
      POSTGRES_DB: algo_assistant
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - algo_network

  # Redis queue service
  redis:
    image: redis:7-alpine
    container_name: algo_assistant_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - algo_network

  # Backend API service
  backend:
    build: ./backend
    container_name: algo_assistant_backend
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000
    env_file:
      - ./backend/.env
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - algo_network

  # Frontend service
  frontend:
    build: ./frontend
    container_name: algo_assistant_frontend
    env_file:
      - ./frontend/.env
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    command: npm start
    depends_on:
      - backend
    networks:
      - algo_network

  # LeetCode sync task producer
  producer:
    build: ./backend
    container_name: algo_assistant_producer
    command: python scripts/leetcode_sync_producer.py
    env_file:
      - ./backend/.env
    volumes:
      - ./backend:/app
    depends_on:
      backend:
        condition: service_started
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - algo_network

  # LeetCode sync task consumer (can be scaled)
  consumer:
    build: ./backend
    container_name: algo_assistant_consumer
    command: python scripts/leetcode_sync_consumer.py
    env_file:
      - ./backend/.env
    volumes:
      - ./backend:/app
    depends_on:
      backend:
        condition: service_started
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - algo_network
    # Scale example: docker-compose up --scale consumer=3

volumes:
  postgres_data:
  redis_data:

networks:
  algo_network:
    driver: bridge
