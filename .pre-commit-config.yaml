# AlgoAssistant Pre-commit Configuration
# Enhanced setup for Python backend and React frontend

default_stages: [pre-commit]
fail_fast: false

repos:
  # ================================
  # GENERAL FILE CHECKS
  # ================================
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0  # Updated to latest
    hooks:
      - id: trailing-whitespace
        name: Remove trailing whitespace
      - id: end-of-file-fixer
        name: Fix end of file
      - id: check-yaml
        name: Check YAML syntax
        args: ["--allow-multiple-documents"]
      - id: check-json
        name: Check JSON syntax
      - id: check-toml
        name: Check TOML syntax
      - id: check-xml
        name: Check XML syntax
      - id: check-added-large-files
        name: Check for large files
        args: ["--maxkb=1000"]
      - id: check-merge-conflict
        name: Check for merge conflicts
      - id: debug-statements
        name: Check for debug statements (Python)
      - id: check-case-conflict
        name: Check for case conflicts
      - id: check-symlinks
        name: Check for broken symlinks
      - id: check-executables-have-shebangs
        name: Check executable files have shebangs
      - id: mixed-line-ending
        name: Check for mixed line endings
        args: ["--fix=lf"]

  # ================================
  # PYTHON CODE FORMATTING
  # ================================
  - repo: https://github.com/psf/black
    rev: 24.4.2  # Updated to latest
    hooks:
      - id: black
        name: Format Python code (Black)
        language_version: python3.11
        files: ^backend/
        args: ["--line-length=88"]

  - repo: https://github.com/pycqa/isort
    rev: 5.13.2  # Updated to latest
    hooks:
      - id: isort
        name: Sort Python imports (isort)
        files: ^backend/
        args: ["--profile", "black", "--line-length", "88"]

  # ================================
  # PYTHON CODE QUALITY
  # ================================
  - repo: https://github.com/pycqa/flake8
    rev: 7.1.0  # Updated to latest
    hooks:
      - id: flake8
        name: Python linting (Flake8)
        files: ^backend/
        args: [
          "--max-line-length=88",
          "--extend-ignore=E203,W503,E501,D100,D101,D102,D103,D104,D105,D107,D200,D205,D212,D400,D401,B008,B017,F401,F841,C401,C408,C901,SIM102,SIM105",
          "--max-complexity=15",
          "--statistics"
        ]
        additional_dependencies: [
          "flake8-bugbear",
          "flake8-comprehensions",
          "flake8-simplify",
          "flake8-docstrings"
        ]

  # MyPy temporarily disabled for pre-commit - too many type errors in working codebase
  # - repo: https://github.com/pre-commit/mirrors-mypy
  #   rev: v1.10.1  # Updated to latest
  #   hooks:
  #     - id: mypy
  #       name: Python type checking (MyPy)
  #       files: ^backend/
  #       additional_dependencies: [
  #         "types-requests",
  #         "types-PyYAML",
  #         "types-setuptools",
  #         "types-redis",
  #         "types-Pillow",
  #         "pydantic",
  #         "fastapi",
  #         "httpx"
  #       ]
  #       args: [
  #         "--ignore-missing-imports",
  #         "--install-types",
  #         "--non-interactive",
  #         "--warn-redundant-casts",
  #         "--warn-unused-ignores",
  #         "--no-strict-optional",
  #         "--allow-untyped-defs",
  #         "--allow-incomplete-defs",
  #         "--allow-untyped-calls"
  #       ]

  # ================================
  # PYTHON SECURITY & VULNERABILITIES
  # ================================
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.9  # Updated to latest
    hooks:
      - id: bandit
        name: Python security scan (Bandit)
        files: ^backend/app/.*\.py$
        args: ["-ll"]
        exclude: ^backend/tests/

  # Safety disabled temporarily due to repository issues
  # - repo: https://github.com/pyupio/safety
  #   rev: 3.2.3
  #   hooks:
  #     - id: safety
  #       name: Python dependency security scan (Safety)
  #       files: ^backend/
  #       args: ["--file=backend/requirements.txt"]

  # ================================
  # PYTHON DOCUMENTATION - disabled due to excessive style warnings
  # ================================
  # - repo: https://github.com/pycqa/pydocstyle
  #   rev: 6.3.0
  #   hooks:
  #     - id: pydocstyle
  #       name: Python docstring style (pydocstyle)
  #       files: ^backend/app/
  #       args: ["--convention=google", "--add-ignore=D100,D101,D102,D103,D104,D105"]

  # ================================
  # FRONTEND JAVASCRIPT/REACT
  # ================================
  - repo: https://github.com/pre-commit/mirrors-eslint
    rev: v9.6.0
    hooks:
      - id: eslint
        name: JavaScript/React linting (ESLint)
        files: ^frontend/src/.*\.(js|jsx|ts|tsx)$
        additional_dependencies: [
          "eslint@^8.57.0",
          "eslint-plugin-react@^7.34.0",
          "eslint-plugin-react-hooks@^4.6.0",
          "eslint-config-react-app@^7.0.1",
          "@typescript-eslint/eslint-plugin@^7.0.0",
          "@typescript-eslint/parser@^7.0.0"
        ]
        args: ["--max-warnings=0"]

  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v4.0.0-alpha.8
    hooks:
      - id: prettier
        name: Format frontend code (Prettier)
        files: ^frontend/.*\.(js|jsx|ts|tsx|json|css|scss|md)$
        args: ["--write", "--print-width=80", "--tab-width=2", "--single-quote"]

  # ================================
  # SECRETS DETECTION
  # ================================
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.5.0
    hooks:
      - id: detect-secrets
        name: Detect secrets
        args: [
          "--baseline", ".secrets.baseline",
          "--exclude-files", ".*\\.env.*",
          "--exclude-files", ".*lock.*",
          "--exclude-files", "node_modules/.*",
          "--exclude-files", ".*/migrations/.*",
          "--exclude-files", "frontend/src/i18n/.*",
          "--exclude-files", ".*test.*",
          "--exclude-files", ".*README.*",
          "--exclude-files", ".*SETUP.*"
        ]

  # ================================
  # DOCKER & YAML VALIDATION
  # ================================
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        name: Docker linting (Hadolint)
        files: Dockerfile.*
        args: ["--ignore", "DL3008", "--ignore", "DL3015", "--ignore", "DL3018"]

  - repo: https://github.com/adrienverge/yamllint
    rev: v1.35.1
    hooks:
      - id: yamllint
        name: YAML linting (yamllint)
        args: ["-d", "relaxed"]

  # ================================
  # COMMIT MESSAGE VALIDATION
  # ================================
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.27.0
    hooks:
      - id: commitizen
        name: Check commit message format
        stages: [commit-msg]

  # ================================
  # PERFORMANCE & OPTIMIZATION
  # ================================
  - repo: local
    hooks:
      - id: no-print-statements
        name: Check for print statements (Python)
        entry: bash -c 'if grep -r "print(" backend/app --include="*.py"; then echo "‚ùå Found print() statements in backend code"; exit 1; fi'
        language: system
        pass_filenames: false

      - id: no-console-log
        name: Check for console.log statements (JavaScript)
        entry: bash -c 'if grep -r "console\.log\|console\.debug" frontend/src --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx"; then echo "‚ùå Found debug console statements in frontend code"; exit 1; fi'
        language: system
        pass_filenames: false

      - id: check-python-requirements
        name: Check Python requirements format
        entry: bash -c 'cd backend && pip-compile --check-hashes requirements.in || echo "‚ö†Ô∏è  Consider updating requirements"'
        language: system
        files: ^backend/requirements.*\.txt$
        pass_filenames: false

# ================================
# CONFIGURATION
# ================================
ci:
  autofix_commit_msg: üé® [pre-commit.ci] auto fixes from pre-commit hooks
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: ‚¨ÜÔ∏è [pre-commit.ci] pre-commit autoupdate
  autoupdate_schedule: weekly
  skip: [commitizen]  # Skip hooks that require external resources
