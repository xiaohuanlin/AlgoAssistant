version: '3.8'

services:
  # SQLite replaces PostgreSQL (saves ~200MB memory)
  # Uses file database, no separate container needed

  # Lightweight Redis configuration
  redis:
    image: redis:7-alpine
    container_name: algo_assistant_redis_mini
    command: redis-server --maxmemory 64mb --maxmemory-policy allkeys-lru --save ""
    volumes:
      - redis_mini_data:/data
    networks:
      - algo_network_mini
    # No exposed ports, internal access only
    restart: unless-stopped

  # Backend service - merge all functionality into one container
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.mini
    container_name: algo_assistant_backend_mini
    env_file:
      - ./backend/.env.mini
    environment:
      - PYTHONPATH=/app
    ports:
      - "8000:8000"
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
    depends_on:
      - redis
    networks:
      - algo_network_mini
    restart: unless-stopped
    # Resource limits - optimized for 1GB server
    deploy:
      resources:
        limits:
          memory: 300M
        reservations:
          memory: 150M

  # Celery Worker - lightweight background tasks
  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile.mini
    container_name: algo_assistant_celery_mini
    command: celery -A app.celery_app.celery_app worker --loglevel=WARNING --concurrency=1 -Q leetcode_sync_queue,git_sync_queue,gemini_sync_queue,notion_sync_queue,notification_queue
    env_file:
      - ./backend/.env.mini
    environment:
      - PYTHONPATH=/app
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
    depends_on:
      - redis
      - backend
    networks:
      - algo_network_mini
    restart: unless-stopped
    # Resource limits - minimal for background tasks
    deploy:
      resources:
        limits:
          memory: 200M
        reservations:
          memory: 100M

  # Celery Beat - scheduled tasks (notifications, etc.)
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.mini
    container_name: algo_assistant_celery_beat_mini
    command: celery -A app.celery_app.celery_app beat --loglevel=WARNING --pidfile=/app/celerybeat.pid --schedule=/app/celerybeat-schedule
    env_file:
      - ./backend/.env.mini
    environment:
      - PYTHONPATH=/app
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
    depends_on:
      - redis
      - backend
    networks:
      - algo_network_mini
    restart: unless-stopped
    # Resource limits - minimal for scheduler
    deploy:
      resources:
        limits:
          memory: 100M
        reservations:
          memory: 50M

  # Frontend - static file service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.mini
      args:
        - NODE_ENV=production
    container_name: algo_assistant_frontend_mini
    env_file:
      - ./frontend/.env.mini
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - algo_network_mini
    restart: unless-stopped
    # Resource limits - ultra-low memory for build process
    deploy:
      resources:
        limits:
          memory: 800M  # Temporary increase for build only
        reservations:
          memory: 200M

volumes:
  redis_mini_data:
  app_data:
  app_logs:

networks:
  algo_network_mini:
    driver: bridge
